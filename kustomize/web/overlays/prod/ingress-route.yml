---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: stripprefix
spec:
  stripPrefix:
    prefixes:
      - /temporal-shop
    forceSlash: false
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: force-index
spec:
  replacePathRegex:
    regex: ^/temporal-shop/app(\/*)$
    replacement: /temporal-shop/app/index
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: force-html
spec:
  replacePathRegex:
    regex: ^/temporal-shop/app/(.*)
    replacement: /temporal-shop/app/$1.html
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: s3-svelte
spec:
  chain:
    middlewares:
      - name: force-index
      - name: force-html
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: add-header
spec:
  headers:
    customRequestHeaders:
      Host: "temporal-sa.s3.amazonaws.com"
      X-Forwarded-Host: "temporal-sa.s3.amazonaws.com"
    customResponseHeaders:
      X-Custom-Response-Header: "22222"
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: ingressroutetemporal-shop
spec:
  entryPoints:
    - web
  routes:
    # Match is the rule corresponding to an underlying router.
    # Later on, match could be the simple form of a path prefix, e.g. just "/bar",
    # but for now we only support a traefik style matching rule.
    - match: Host(`sa.tmprl-test.cloud`) && PathPrefix(`/temporal-shop/app`)
      # kind could eventually be one of "Rule", "Path", "Host", "Method", "Header",
      # "Parameter", etc, to support simpler forms of rule matching, but for now we
      # only support "Rule".
      kind: Rule
      # (optional) Priority disambiguates rules of the same length, for route matching.
      priority: 13
      middlewares:
        - name: s3-svelte
        - name: add-header
        # (default 1) A weight used by the weighted round-robin strategy (WRR).
        # (default true) PassHostHeader controls whether to leave the request's Host
        # Header as it was before it reached the proxy, or whether to let the proxy set it
        # to the destination (backend) host.
      services:
        - name: ui
          namespace: temporal-shop
          port: 80
          passHostHeader: false
          responseForwarding:
            # (default 100ms) Interval between flushes of the buffered response body to the client.
            flushInterval: 100ms
          weight: 1

    # Match is the rule corresponding to an underlying router.
    # Later on, match could be the simple form of a path prefix, e.g. just "/bar",
    # but for now we only support a traefik style matching rule.
    - match: Host(`sa.tmprl-test.cloud`) && PathPrefix(`/temporal-shop`)
      # kind could eventually be one of "Rule", "Path", "Host", "Method", "Header",
      # "Parameter", etc, to support simpler forms of rule matching, but for now we
      # only support "Rule".
      kind: Rule
        # (optional) Priority disambiguates rules of the same length, for route matching.
      priority: 12
      middlewares:
        - name: stripprefix
        # (default 1) A weight used by the weighted round-robin strategy (WRR).
        # (default true) PassHostHeader controls whether to leave the request's Host
        # Header as it was before it reached the proxy, or whether to let the proxy set it
        # to the destination (backend) host.
      services:
        - name: web
          namespace: temporal-shop
          port: 80
          passHostHeader: true
          responseForwarding:
            # (default 100ms) Interval between flushes of the buffered response body to the client.
            flushInterval: 100ms
          weight: 1
