package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"

	"github.com/temporalio/temporal-shop/web/bff/internal/gql/graph/model"
)

// SetCartItems is the resolver for the setCartItems field.
func (r *mutationResolver) SetCartItems(ctx context.Context, input *model.SetCartItemsInput) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: setCartItems - setCartItems"))
}

// Inventory is the resolver for the inventory field.
func (r *queryResolver) Inventory(ctx context.Context, input *model.InventoryInput) (*model.Inventory, error) {
	panic(fmt.Errorf("not implemented: Inventory - inventory"))
}

// Shopper is the resolver for the shopper field.
func (r *queryResolver) Shopper(ctx context.Context, input *model.ShopperInput) (*model.Shopper, error) {
	panic(fmt.Errorf("not implemented: Shopper - shopper"))
}

// Cart is the resolver for the cart field.
func (r *queryResolver) Cart(ctx context.Context, input *model.CartInput) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: PublishCart - cart"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input *model.UserInput) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Ping is the resolver for the ping field.
func (r *queryResolver) Ping(ctx context.Context, input *model.PingInput) (*model.Pong, error) {
	panic(fmt.Errorf("not implemented: Ping - ping"))
}

// Cart is the resolver for the cart field.
func (r *subscriptionResolver) Cart(ctx context.Context, input model.CartSubscriptionInput) (<-chan *model.Cart, error) {
	panic(fmt.Errorf("not implemented: PublishCart - cart"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
