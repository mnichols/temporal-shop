name: Temporal Shop Build Pipeline
on:
  push:
    branches:
      - svelteify
#  pull_request:
#      - main
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: temporal-shop/web
  SLACK_CHANNEL: C038377FSCF #team-gtm
  GOPRIVATE: github.com/temporalio
  GOVERSION: '^1.18.4'
  MY_PAT: ${{ secrets.MY_PAT }}
  SHORT_SHA: $(echo ${{ github.sha }} | cut -c 1-8)

jobs:
#  run-tests:
#    runs-on: temporal-shop #this should be in the CR created for the runner
#    steps:
#      - name: Clone
#        uses: actions/checkout@v3
#      #### asdf steps
#      #### TODO replace with a composite action : https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
#      - name: Setup asdf
#        # see https://github.com/asdf-vm/actions/pull/467
#        uses: aeddi/asdf-actions/setup@681862213369d8d868be8a2a7d6040c4d63027db
#        with:
#          skip_install: true
#      - name: asdf cache
#        id: asdf-cache
#        uses: actions/cache@v2
#        with:
#          path: ${{ env.ASDF_DIR }}
#          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
#          restore-keys: |
#            ${{ runner.os }}-asdf-
#      - name: Install asdf tools from .tool-versions
#        if: steps.asdf-cache.outputs.cache-hit != 'true'
#        uses: asdf-vm/actions/install@v1
#      #### end asdf steps
#      - name: SetupGo
#        uses: actions/setup-go@v3
#        with:
#          go-version: ${{ env.GOVERSION }}
#      - name: Test
#        run: |
#          make test

  build-upload-image:
    runs-on: temporal-shop #this should be in the CR created for the runner
#    needs: [run-tests]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Clone
        uses: actions/checkout@v3
      #### asdf steps
      #### TODO replace with a composite action : https://docs.github.com/en/actions/creating-actions/creating-a-composite-action
      - name: Setup asdf
        # see https://github.com/asdf-vm/actions/pull/467
        uses: aeddi/asdf-actions/setup@681862213369d8d868be8a2a7d6040c4d63027db
        with:
          skip_install: true
      - name: asdf cache
        id: asdf-cache
        uses: actions/cache@v2
        with:
          path: ${{ env.ASDF_DIR }}
          key: ${{ runner.os }}-asdf-${{ hashFiles('**/.tool-versions') }}
          restore-keys: |
            ${{ runner.os }}-asdf-
      - name: Install asdf tools from .tool-versions
        if: steps.asdf-cache.outputs.cache-hit != 'true'
        uses: asdf-vm/actions/install@v1
      #### end asdf steps

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push to AWS ECR
        id: build-image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: temporal-shop/web
          addLatest: true
          # tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          registry: ${{ steps.login-ecr.outputs.registry }}
          dockerfile: Dockerfile.web
      - name: Update Kubeconfig
        run: |
          cicd/scripts/update-kubeconfig.sh
        shell: bash
      - name: Split Tags
        uses: jungwinter/split@v2
        id: split
        with:
          separator: ','
          msg: ${{ steps.build-image.outputs.tags }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::429214323166:role/github-actions-role
          aws-region: us-east-1
      - name: Public Web UI
        run: aws s3 sync ./web/bff/generated s3://temporal-sa/temporal-shop/web
      - name: Deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          CTX=$(kubectl config current-context)
          IMG=${{ steps.build-image.outputs.imageFullName }}:${{ steps.split.outputs._0 }}
          echo "deploying to $CTX => $IMG"
          $(cd kustomize/web/overlays/prod && \
            kustomize edit set image amazonaws.com/web="$IMG")
          
          kustomize build kustomize/web/overlays/prod | kubectl apply -f -